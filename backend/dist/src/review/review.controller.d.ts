import { ReviewService } from './review.service';
import { CreateReviewDto } from './dto/create-review.dto';
import { UpdateReviewDto } from './dto/update-review.dto';
import { Request } from 'express';
import { Product } from 'entities/Product';
export declare class ReviewController {
    private readonly reviewService;
    constructor(reviewService: ReviewService);
    create(req: Request, createReviewDto: CreateReviewDto, productId: string): Promise<{
        status: string;
        message: string;
        data: {
            id: string;
            rating: number;
            comment: string;
            user: import("../../entities/User").User;
            product: Product;
            createdAt: Date;
        };
    }>;
    findAllreviewsByProduct(productId: string): Promise<{
        status: string;
        message: string;
        data?: undefined;
    } | {
        status: string;
        message: string;
        data: {
            [n: number]: import("../../entities/review").Review;
            length: number;
            toString(): string;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
            pop(): import("../../entities/review").Review;
            push(...items: import("../../entities/review").Review[]): number;
            concat(...items: ConcatArray<import("../../entities/review").Review>[]): import("../../entities/review").Review[];
            concat(...items: (import("../../entities/review").Review | ConcatArray<import("../../entities/review").Review>)[]): import("../../entities/review").Review[];
            join(separator?: string): string;
            reverse(): import("../../entities/review").Review[];
            shift(): import("../../entities/review").Review;
            slice(start?: number, end?: number): import("../../entities/review").Review[];
            sort(compareFn?: (a: import("../../entities/review").Review, b: import("../../entities/review").Review) => number): import("../../entities/review").Review[];
            splice(start: number, deleteCount?: number): import("../../entities/review").Review[];
            splice(start: number, deleteCount: number, ...items: import("../../entities/review").Review[]): import("../../entities/review").Review[];
            unshift(...items: import("../../entities/review").Review[]): number;
            indexOf(searchElement: import("../../entities/review").Review, fromIndex?: number): number;
            lastIndexOf(searchElement: import("../../entities/review").Review, fromIndex?: number): number;
            every<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => U, thisArg?: any): U[];
            filter<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => value is S, thisArg?: any): S[];
            filter(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): import("../../entities/review").Review[];
            reduce(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review): import("../../entities/review").Review;
            reduce(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review, initialValue: import("../../entities/review").Review): import("../../entities/review").Review;
            reduce<U>(callbackfn: (previousValue: U, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review): import("../../entities/review").Review;
            reduceRight(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review, initialValue: import("../../entities/review").Review): import("../../entities/review").Review;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => U, initialValue: U): U;
            find<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => value is S, thisArg?: any): S;
            find(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => unknown, thisArg?: any): import("../../entities/review").Review;
            findIndex(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => unknown, thisArg?: any): number;
            fill(value: import("../../entities/review").Review, start?: number, end?: number): import("../../entities/review").Review[];
            copyWithin(target: number, start: number, end?: number): import("../../entities/review").Review[];
            entries(): ArrayIterator<[number, import("../../entities/review").Review]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<import("../../entities/review").Review>;
            includes(searchElement: import("../../entities/review").Review, fromIndex?: number): boolean;
            flatMap<U, This = undefined>(callback: (this: This, value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => U | readonly U[], thisArg?: This): U[];
            flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
            [Symbol.iterator](): ArrayIterator<import("../../entities/review").Review>;
            [Symbol.unscopables]: {
                [x: number]: boolean;
                length?: boolean;
                toString?: boolean;
                toLocaleString?: boolean;
                pop?: boolean;
                push?: boolean;
                concat?: boolean;
                join?: boolean;
                reverse?: boolean;
                shift?: boolean;
                slice?: boolean;
                sort?: boolean;
                splice?: boolean;
                unshift?: boolean;
                indexOf?: boolean;
                lastIndexOf?: boolean;
                every?: boolean;
                some?: boolean;
                forEach?: boolean;
                map?: boolean;
                filter?: boolean;
                reduce?: boolean;
                reduceRight?: boolean;
                find?: boolean;
                findIndex?: boolean;
                fill?: boolean;
                copyWithin?: boolean;
                entries?: boolean;
                keys?: boolean;
                values?: boolean;
                includes?: boolean;
                flatMap?: boolean;
                flat?: boolean;
                [Symbol.iterator]?: boolean;
                readonly [Symbol.unscopables]?: boolean;
                at?: boolean;
            };
            at(index: number): import("../../entities/review").Review;
        };
    }>;
    findAllReviewsByUser(req: Request): Promise<{
        status: string;
        message: string;
        data?: undefined;
    } | {
        status: string;
        message: string;
        data: {
            [n: number]: import("../../entities/review").Review;
            length: number;
            toString(): string;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
            pop(): import("../../entities/review").Review;
            push(...items: import("../../entities/review").Review[]): number;
            concat(...items: ConcatArray<import("../../entities/review").Review>[]): import("../../entities/review").Review[];
            concat(...items: (import("../../entities/review").Review | ConcatArray<import("../../entities/review").Review>)[]): import("../../entities/review").Review[];
            join(separator?: string): string;
            reverse(): import("../../entities/review").Review[];
            shift(): import("../../entities/review").Review;
            slice(start?: number, end?: number): import("../../entities/review").Review[];
            sort(compareFn?: (a: import("../../entities/review").Review, b: import("../../entities/review").Review) => number): import("../../entities/review").Review[];
            splice(start: number, deleteCount?: number): import("../../entities/review").Review[];
            splice(start: number, deleteCount: number, ...items: import("../../entities/review").Review[]): import("../../entities/review").Review[];
            unshift(...items: import("../../entities/review").Review[]): number;
            indexOf(searchElement: import("../../entities/review").Review, fromIndex?: number): number;
            lastIndexOf(searchElement: import("../../entities/review").Review, fromIndex?: number): number;
            every<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => U, thisArg?: any): U[];
            filter<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => value is S, thisArg?: any): S[];
            filter(predicate: (value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => unknown, thisArg?: any): import("../../entities/review").Review[];
            reduce(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review): import("../../entities/review").Review;
            reduce(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review, initialValue: import("../../entities/review").Review): import("../../entities/review").Review;
            reduce<U>(callbackfn: (previousValue: U, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review): import("../../entities/review").Review;
            reduceRight(callbackfn: (previousValue: import("../../entities/review").Review, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => import("../../entities/review").Review, initialValue: import("../../entities/review").Review): import("../../entities/review").Review;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("../../entities/review").Review, currentIndex: number, array: import("../../entities/review").Review[]) => U, initialValue: U): U;
            find<S extends import("../../entities/review").Review>(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => value is S, thisArg?: any): S;
            find(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => unknown, thisArg?: any): import("../../entities/review").Review;
            findIndex(predicate: (value: import("../../entities/review").Review, index: number, obj: import("../../entities/review").Review[]) => unknown, thisArg?: any): number;
            fill(value: import("../../entities/review").Review, start?: number, end?: number): import("../../entities/review").Review[];
            copyWithin(target: number, start: number, end?: number): import("../../entities/review").Review[];
            entries(): ArrayIterator<[number, import("../../entities/review").Review]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<import("../../entities/review").Review>;
            includes(searchElement: import("../../entities/review").Review, fromIndex?: number): boolean;
            flatMap<U, This = undefined>(callback: (this: This, value: import("../../entities/review").Review, index: number, array: import("../../entities/review").Review[]) => U | readonly U[], thisArg?: This): U[];
            flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
            [Symbol.iterator](): ArrayIterator<import("../../entities/review").Review>;
            [Symbol.unscopables]: {
                [x: number]: boolean;
                length?: boolean;
                toString?: boolean;
                toLocaleString?: boolean;
                pop?: boolean;
                push?: boolean;
                concat?: boolean;
                join?: boolean;
                reverse?: boolean;
                shift?: boolean;
                slice?: boolean;
                sort?: boolean;
                splice?: boolean;
                unshift?: boolean;
                indexOf?: boolean;
                lastIndexOf?: boolean;
                every?: boolean;
                some?: boolean;
                forEach?: boolean;
                map?: boolean;
                filter?: boolean;
                reduce?: boolean;
                reduceRight?: boolean;
                find?: boolean;
                findIndex?: boolean;
                fill?: boolean;
                copyWithin?: boolean;
                entries?: boolean;
                keys?: boolean;
                values?: boolean;
                includes?: boolean;
                flatMap?: boolean;
                flat?: boolean;
                [Symbol.iterator]?: boolean;
                readonly [Symbol.unscopables]?: boolean;
                at?: boolean;
            };
            at(index: number): import("../../entities/review").Review;
        };
    }>;
    findOne(id: string): Promise<{
        status: string;
        message: string;
        data: import("../../entities/review").Review;
    }>;
    update(req: Request, id: string, updateReviewDto: UpdateReviewDto): Promise<{
        status: string;
        message: string;
        data: import("../../entities/review").Review;
    }>;
    remove(req: Request, id: string): Promise<{
        status: string;
        message: string;
    }>;
}
